#ifndef CSPPORT_IDL
#define CSPPORT_IDL

#include "DataPort.idl"

#pragma prefix "openrtm.aist.go.jp"
/*!
 * @brief CSP (Communicating Sequential Processes) channel port
 *
 * Communicating Sequential Processes (CSP) is a formal language for
 * describing patterns of interaction in concurrent systems. CSP uses
 * explicit channels for message passing, whereas actor systems
 * transmit messages to named destination actors. These approaches may
 * be considered duals of each other, in the sense that processes
 * receiving through a single channel effectively have an identity
 * corresponding to that channel, while the name-based coupling
 * between actors may be broken by constructing actors that behave as
 * channels.
 * (from https://en.wikipedia.org/wiki/Communicating_sequential_processes)
 *
 * http://arild.github.io/csp-presentation
 * https://qiita.com/ymgyt/items/420eaf2bcf7bee4ae152
 * 
 
 * This interface definition realizes CSP channel as an RTC port.
 *
 * CSPチャネル
 * - 同期型メッセージパッシング
 *   - 確実に伝達（受信側が受信できるまで待つ）
 * - 通信可能な相手を自動的に選択して通信可能
 *   - 受信可能なプロセスを選択して送信する（全てが受信不可のときは、ひと
 *     つが受信可能になるまで送信を延期）
 * - 通信可能なチャネルを自動的に選択（外部選択）して通信可能
 *   - 受信可能なプロセスが接続されているチャネルを選択して送信する
 *
 */
module CSP
{
  interface InPortCsp
  {
    RTC::PortStatus put(in RTC::OctetSeq data);
    boolean is_writable(in boolean retry);
  };
  
  interface OutPortCsp
  {
    RTC::PortStatus get(out RTC::OctetSeq data);
    boolean is_readable(in boolean retry);
  };
};

#endif // CSPPORT_IDL