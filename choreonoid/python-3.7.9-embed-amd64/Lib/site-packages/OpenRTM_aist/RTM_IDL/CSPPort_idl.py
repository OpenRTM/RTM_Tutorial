# Python stubs generated by omniidl from C:\workspace\openrtmpy1\OpenRTM_aist\RTM_IDL\CSPPort.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "DataPort.idl"
import DataPort_idl
_0_RTC = omniORB.openModule("RTC")
_0_RTC__POA = omniORB.openModule("RTC__POA")

#
# Start of module "CSP"
#
__name__ = "CSP"
_0_CSP = omniORB.openModule("CSP", r"C:\workspace\openrtmpy1\OpenRTM_aist\RTM_IDL\CSPPort.idl")
_0_CSP__POA = omniORB.openModule("CSP__POA", r"C:\workspace\openrtmpy1\OpenRTM_aist\RTM_IDL\CSPPort.idl")


# interface InPortCsp
_0_CSP._d_InPortCsp = (omniORB.tcInternal.tv_objref, "IDL:openrtm.aist.go.jp/CSP/InPortCsp:1.0", "InPortCsp")
omniORB.typeMapping["IDL:openrtm.aist.go.jp/CSP/InPortCsp:1.0"] = _0_CSP._d_InPortCsp
_0_CSP.InPortCsp = omniORB.newEmptyClass()
class InPortCsp :
    _NP_RepositoryId = _0_CSP._d_InPortCsp[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CSP.InPortCsp = InPortCsp
_0_CSP._tc_InPortCsp = omniORB.tcInternal.createTypeCode(_0_CSP._d_InPortCsp)
omniORB.registerType(InPortCsp._NP_RepositoryId, _0_CSP._d_InPortCsp, _0_CSP._tc_InPortCsp)

# InPortCsp operations and attributes
InPortCsp._d_put = ((omniORB.typeMapping["IDL:omg.org/RTC/OctetSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/PortStatus:1.0"], ), None)
InPortCsp._d_is_writable = ((omniORB.tcInternal.tv_boolean, ), (omniORB.tcInternal.tv_boolean, ), None)

# InPortCsp object reference
class _objref_InPortCsp (CORBA.Object):
    _NP_RepositoryId = InPortCsp._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def put(self, *args):
        return self._obj.invoke("put", _0_CSP.InPortCsp._d_put, args)

    def is_writable(self, *args):
        return self._obj.invoke("is_writable", _0_CSP.InPortCsp._d_is_writable, args)

omniORB.registerObjref(InPortCsp._NP_RepositoryId, _objref_InPortCsp)
_0_CSP._objref_InPortCsp = _objref_InPortCsp
del InPortCsp, _objref_InPortCsp

# InPortCsp skeleton
__name__ = "CSP__POA"
class InPortCsp (PortableServer.Servant):
    _NP_RepositoryId = _0_CSP.InPortCsp._NP_RepositoryId


    _omni_op_d = {"put": _0_CSP.InPortCsp._d_put, "is_writable": _0_CSP.InPortCsp._d_is_writable}

InPortCsp._omni_skeleton = InPortCsp
_0_CSP__POA.InPortCsp = InPortCsp
omniORB.registerSkeleton(InPortCsp._NP_RepositoryId, InPortCsp)
del InPortCsp
__name__ = "CSP"

# interface OutPortCsp
_0_CSP._d_OutPortCsp = (omniORB.tcInternal.tv_objref, "IDL:openrtm.aist.go.jp/CSP/OutPortCsp:1.0", "OutPortCsp")
omniORB.typeMapping["IDL:openrtm.aist.go.jp/CSP/OutPortCsp:1.0"] = _0_CSP._d_OutPortCsp
_0_CSP.OutPortCsp = omniORB.newEmptyClass()
class OutPortCsp :
    _NP_RepositoryId = _0_CSP._d_OutPortCsp[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CSP.OutPortCsp = OutPortCsp
_0_CSP._tc_OutPortCsp = omniORB.tcInternal.createTypeCode(_0_CSP._d_OutPortCsp)
omniORB.registerType(OutPortCsp._NP_RepositoryId, _0_CSP._d_OutPortCsp, _0_CSP._tc_OutPortCsp)

# OutPortCsp operations and attributes
OutPortCsp._d_get = ((), (omniORB.typeMapping["IDL:omg.org/RTC/PortStatus:1.0"], omniORB.typeMapping["IDL:omg.org/RTC/OctetSeq:1.0"]), None)
OutPortCsp._d_is_readable = ((omniORB.tcInternal.tv_boolean, ), (omniORB.tcInternal.tv_boolean, ), None)

# OutPortCsp object reference
class _objref_OutPortCsp (CORBA.Object):
    _NP_RepositoryId = OutPortCsp._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def get(self, *args):
        return self._obj.invoke("get", _0_CSP.OutPortCsp._d_get, args)

    def is_readable(self, *args):
        return self._obj.invoke("is_readable", _0_CSP.OutPortCsp._d_is_readable, args)

omniORB.registerObjref(OutPortCsp._NP_RepositoryId, _objref_OutPortCsp)
_0_CSP._objref_OutPortCsp = _objref_OutPortCsp
del OutPortCsp, _objref_OutPortCsp

# OutPortCsp skeleton
__name__ = "CSP__POA"
class OutPortCsp (PortableServer.Servant):
    _NP_RepositoryId = _0_CSP.OutPortCsp._NP_RepositoryId


    _omni_op_d = {"get": _0_CSP.OutPortCsp._d_get, "is_readable": _0_CSP.OutPortCsp._d_is_readable}

OutPortCsp._omni_skeleton = OutPortCsp
_0_CSP__POA.OutPortCsp = OutPortCsp
omniORB.registerSkeleton(OutPortCsp._NP_RepositoryId, OutPortCsp)
del OutPortCsp
__name__ = "CSP"

#
# End of module "CSP"
#
__name__ = "CSPPort_idl"

_exported_modules = ( "CSP", )

# The end.
