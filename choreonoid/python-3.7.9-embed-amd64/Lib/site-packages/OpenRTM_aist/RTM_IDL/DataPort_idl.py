# Python stubs generated by omniidl from C:\workspace\openrtmpy1\OpenRTM_aist\RTM_IDL\DataPort.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "RTC"
#
__name__ = "RTC"
_0_RTC = omniORB.openModule("RTC", r"C:\workspace\openrtmpy1\OpenRTM_aist\RTM_IDL\DataPort.idl")
_0_RTC__POA = omniORB.openModule("RTC__POA", r"C:\workspace\openrtmpy1\OpenRTM_aist\RTM_IDL\DataPort.idl")


# enum PortStatus
_0_RTC.PORT_OK = omniORB.EnumItem("PORT_OK", 0)
_0_RTC.PORT_ERROR = omniORB.EnumItem("PORT_ERROR", 1)
_0_RTC.BUFFER_FULL = omniORB.EnumItem("BUFFER_FULL", 2)
_0_RTC.BUFFER_EMPTY = omniORB.EnumItem("BUFFER_EMPTY", 3)
_0_RTC.BUFFER_TIMEOUT = omniORB.EnumItem("BUFFER_TIMEOUT", 4)
_0_RTC.UNKNOWN_ERROR = omniORB.EnumItem("UNKNOWN_ERROR", 5)
_0_RTC.PortStatus = omniORB.Enum("IDL:omg.org/RTC/PortStatus:1.0", (_0_RTC.PORT_OK, _0_RTC.PORT_ERROR, _0_RTC.BUFFER_FULL, _0_RTC.BUFFER_EMPTY, _0_RTC.BUFFER_TIMEOUT, _0_RTC.UNKNOWN_ERROR,))

_0_RTC._d_PortStatus  = (omniORB.tcInternal.tv_enum, _0_RTC.PortStatus._NP_RepositoryId, "PortStatus", _0_RTC.PortStatus._items)
_0_RTC._tc_PortStatus = omniORB.tcInternal.createTypeCode(_0_RTC._d_PortStatus)
omniORB.registerType(_0_RTC.PortStatus._NP_RepositoryId, _0_RTC._d_PortStatus, _0_RTC._tc_PortStatus)

# typedef ... OctetSeq
class OctetSeq:
    _NP_RepositoryId = "IDL:omg.org/RTC/OctetSeq:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_RTC.OctetSeq = OctetSeq
_0_RTC._d_OctetSeq  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0)
_0_RTC._ad_OctetSeq = (omniORB.tcInternal.tv_alias, OctetSeq._NP_RepositoryId, "OctetSeq", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_octet, 0))
_0_RTC._tc_OctetSeq = omniORB.tcInternal.createTypeCode(_0_RTC._ad_OctetSeq)
omniORB.registerType(OctetSeq._NP_RepositoryId, _0_RTC._ad_OctetSeq, _0_RTC._tc_OctetSeq)
del OctetSeq

# interface DataPushService
_0_RTC._d_DataPushService = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/DataPushService:1.0", "DataPushService")
omniORB.typeMapping["IDL:omg.org/RTC/DataPushService:1.0"] = _0_RTC._d_DataPushService
_0_RTC.DataPushService = omniORB.newEmptyClass()
class DataPushService :
    _NP_RepositoryId = _0_RTC._d_DataPushService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.DataPushService = DataPushService
_0_RTC._tc_DataPushService = omniORB.tcInternal.createTypeCode(_0_RTC._d_DataPushService)
omniORB.registerType(DataPushService._NP_RepositoryId, _0_RTC._d_DataPushService, _0_RTC._tc_DataPushService)

# DataPushService operations and attributes
DataPushService._d_push = ((omniORB.typeMapping["IDL:omg.org/RTC/OctetSeq:1.0"], ), (omniORB.typeMapping["IDL:omg.org/RTC/PortStatus:1.0"], ), None)

# DataPushService object reference
class _objref_DataPushService (CORBA.Object):
    _NP_RepositoryId = DataPushService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def push(self, *args):
        return self._obj.invoke("push", _0_RTC.DataPushService._d_push, args)

omniORB.registerObjref(DataPushService._NP_RepositoryId, _objref_DataPushService)
_0_RTC._objref_DataPushService = _objref_DataPushService
del DataPushService, _objref_DataPushService

# DataPushService skeleton
__name__ = "RTC__POA"
class DataPushService (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.DataPushService._NP_RepositoryId


    _omni_op_d = {"push": _0_RTC.DataPushService._d_push}

DataPushService._omni_skeleton = DataPushService
_0_RTC__POA.DataPushService = DataPushService
omniORB.registerSkeleton(DataPushService._NP_RepositoryId, DataPushService)
del DataPushService
__name__ = "RTC"

# interface DataPullService
_0_RTC._d_DataPullService = (omniORB.tcInternal.tv_objref, "IDL:omg.org/RTC/DataPullService:1.0", "DataPullService")
omniORB.typeMapping["IDL:omg.org/RTC/DataPullService:1.0"] = _0_RTC._d_DataPullService
_0_RTC.DataPullService = omniORB.newEmptyClass()
class DataPullService :
    _NP_RepositoryId = _0_RTC._d_DataPullService[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_RTC.DataPullService = DataPullService
_0_RTC._tc_DataPullService = omniORB.tcInternal.createTypeCode(_0_RTC._d_DataPullService)
omniORB.registerType(DataPullService._NP_RepositoryId, _0_RTC._d_DataPullService, _0_RTC._tc_DataPullService)

# DataPullService operations and attributes
DataPullService._d_pull = ((), (omniORB.typeMapping["IDL:omg.org/RTC/PortStatus:1.0"], omniORB.typeMapping["IDL:omg.org/RTC/OctetSeq:1.0"]), None)

# DataPullService object reference
class _objref_DataPullService (CORBA.Object):
    _NP_RepositoryId = DataPullService._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def pull(self, *args):
        return self._obj.invoke("pull", _0_RTC.DataPullService._d_pull, args)

omniORB.registerObjref(DataPullService._NP_RepositoryId, _objref_DataPullService)
_0_RTC._objref_DataPullService = _objref_DataPullService
del DataPullService, _objref_DataPullService

# DataPullService skeleton
__name__ = "RTC__POA"
class DataPullService (PortableServer.Servant):
    _NP_RepositoryId = _0_RTC.DataPullService._NP_RepositoryId


    _omni_op_d = {"pull": _0_RTC.DataPullService._d_pull}

DataPullService._omni_skeleton = DataPullService
_0_RTC__POA.DataPullService = DataPullService
omniORB.registerSkeleton(DataPullService._NP_RepositoryId, DataPullService)
del DataPullService
__name__ = "RTC"

#
# End of module "RTC"
#
__name__ = "DataPort_idl"

_exported_modules = ( "RTC", )

# The end.
