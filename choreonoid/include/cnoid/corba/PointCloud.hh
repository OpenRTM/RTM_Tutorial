// This file is generated by omniidl (C++ backend)- omniORB_4_3. Do not edit.
#ifndef __PointCloud_hh__
#define __PointCloud_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_PointCloud
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_PointCloud
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_PointCloud
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE PointCloudTypes

_CORBA_MODULE_BEG

  struct Time {
    typedef _CORBA_ConstrType_Fix_Var<Time> _var_type;

    
    ::CORBA::ULong sec;

    ::CORBA::ULong nsec;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Time::_var_type Time_var;

  typedef Time& Time_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Time;

  enum DataType { INT8, UINT8, INT16, UINT16, INT32, UINT32, FLOAT32, FLOAT64 /*, __max_DataType=0xffffffff */ };
  typedef DataType& DataType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataType;

  struct PointField {
    typedef _CORBA_ConstrType_Variable_Var<PointField> _var_type;

    
    ::CORBA::String_member name;

    ::CORBA::ULong offset;

    DataType data_type;

    ::CORBA::ULong count;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PointField::_var_type PointField_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PointField,PointField_var > PointField_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PointField;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PointFieldList;

  class PointFieldList_var;

  class PointFieldList : public _CORBA_Unbounded_Sequence< PointField >  {
  public:
    typedef PointFieldList_var _var_type;
    inline PointFieldList() {}
    inline PointFieldList(const PointFieldList& _s)
      : _CORBA_Unbounded_Sequence< PointField > (_s) {}

    inline PointFieldList(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< PointField > (_max) {}
    inline PointFieldList(_CORBA_ULong _max, _CORBA_ULong _len, PointField* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< PointField > (_max, _len, _val, _rel) {}

  

    inline PointFieldList& operator = (const PointFieldList& _s) {
      _CORBA_Unbounded_Sequence< PointField > ::operator=(_s);
      return *this;
    }
  };

  class PointFieldList_out;

  class PointFieldList_var {
  public:
    inline PointFieldList_var() : _pd_seq(0) {}
    inline PointFieldList_var(PointFieldList* _s) : _pd_seq(_s) {}
    inline PointFieldList_var(const PointFieldList_var& _s) {
      if (_s._pd_seq)  _pd_seq = new PointFieldList(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~PointFieldList_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline PointFieldList_var& operator = (PointFieldList* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline PointFieldList_var& operator = (const PointFieldList_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new PointFieldList;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline PointField& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline PointFieldList* operator -> () { return _pd_seq; }
    inline const PointFieldList* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator PointFieldList& () const { return *_pd_seq; }
#else
    inline operator const PointFieldList& () const { return *_pd_seq; }
    inline operator PointFieldList& () { return *_pd_seq; }
#endif
      
    inline const PointFieldList& in() const { return *_pd_seq; }
    inline PointFieldList&       inout()    { return *_pd_seq; }
    inline PointFieldList*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline PointFieldList* _retn() { PointFieldList* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class PointFieldList_out;
    
  private:
    PointFieldList* _pd_seq;
  };

  class PointFieldList_out {
  public:
    inline PointFieldList_out(PointFieldList*& _s) : _data(_s) { _data = 0; }
    inline PointFieldList_out(PointFieldList_var& _s)
      : _data(_s._pd_seq) { _s = (PointFieldList*) 0; }
    inline PointFieldList_out(const PointFieldList_out& _s) : _data(_s._data) {}
    inline PointFieldList_out& operator = (const PointFieldList_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline PointFieldList_out& operator = (PointFieldList* _s) {
      _data = _s;
      return *this;
    }
    inline operator PointFieldList*&()  { return _data; }
    inline PointFieldList*& ptr()       { return _data; }
    inline PointFieldList* operator->() { return _data; }

    inline PointField& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    PointFieldList*& _data;

  private:
    PointFieldList_out();
    PointFieldList_out& operator=(const PointFieldList_var&);
  };

  struct PointCloud {
    typedef _CORBA_ConstrType_Variable_Var<PointCloud> _var_type;

    
    Time tm;

    ::CORBA::ULong seq;

    ::CORBA::ULong height;

    ::CORBA::ULong width;

    ::CORBA::String_member type;

    PointFieldList fields;

    ::CORBA::Boolean is_bigendian;

    ::CORBA::ULong point_step;

    ::CORBA::ULong row_step;

    typedef _CORBA_Unbounded_Sequence_Octet _data_seq;
    _data_seq data;

    ::CORBA::Boolean is_dense;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PointCloud::_var_type PointCloud_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PointCloud,PointCloud_var > PointCloud_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PointCloud;

_CORBA_MODULE_END



_CORBA_MODULE POA_PointCloudTypes
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_PointCloudTypes
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const PointCloudTypes::Time& _s);
extern void operator<<=(::CORBA::Any& _a, PointCloudTypes::Time* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PointCloudTypes::Time*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const PointCloudTypes::Time*& _sp);

inline void operator >>=(PointCloudTypes::DataType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (PointCloudTypes::DataType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= PointCloudTypes::FLOAT64) {
    _e = (PointCloudTypes::DataType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, PointCloudTypes::DataType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PointCloudTypes::DataType& _s);

extern void operator<<=(::CORBA::Any& _a, const PointCloudTypes::PointField& _s);
extern void operator<<=(::CORBA::Any& _a, PointCloudTypes::PointField* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PointCloudTypes::PointField*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const PointCloudTypes::PointField*& _sp);

void operator<<=(::CORBA::Any& _a, const PointCloudTypes::PointFieldList& _s);
void operator<<=(::CORBA::Any& _a, PointCloudTypes::PointFieldList* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PointCloudTypes::PointFieldList*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const PointCloudTypes::PointFieldList*& _sp);

extern void operator<<=(::CORBA::Any& _a, const PointCloudTypes::PointCloud& _s);
extern void operator<<=(::CORBA::Any& _a, PointCloudTypes::PointCloud* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, PointCloudTypes::PointCloud*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const PointCloudTypes::PointCloud*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_PointCloud
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_PointCloud
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_PointCloud
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_PointCloud
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_PointCloud
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_PointCloud
#endif

#endif  // __PointCloud_hh__

